#include "../TriDiagonalSystem.hh"
#include <cmath>

int main(int /* argc */, const char * /* argv */[] ) {
    // Random tridiagonal matrix and rhs, plus solutions from Matlab
    std::vector<double> a{ 0.225921780972399, 0.170708047147859, 0.227664297816554, 0.435698684103899, 0.311102286650413, 0.923379642103244, 0.430207391329584, 0.184816320124136, 0.904880968679893, 0.979748378356085, 0.438869973126103, 0.111119223440599, 0.258064695912067, 0.408719846112552, 0.594896074008614, 0.262211747780845, 0.602843089382083, 0.711215780433683, 0.221746734017240 },
						d{ 0.508508655381127, 0.510771564172110, 0.817627708322262, 0.794831416883453, 0.644318130193692, 0.378609382660268, 0.811580458282477, 0.532825588799455, 0.350727103576883, 0.939001561999887, 0.875942811492984, 0.550156342898422, 0.622475086001227, 0.587044704531417, 0.207742292733028, 0.301246330279491, 0.470923348517591, 0.230488160211558, 0.844308792695389, 0.194764289567049 },
						c{ 0.117417650855806, 0.296675873218327, 0.318778301925882, 0.424166759713807, 0.507858284661118, 0.085515797090044, 0.262482234698333, 0.801014622769739, 0.029220277562146, 0.928854139478045, 0.730330862855453, 0.488608973803579, 0.578525061023439, 0.237283579771521, 0.458848828179931, 0.963088539286913, 0.546805718738968, 0.521135830804001, 0.231594386708524 },
                      rhs{ 0.679135540865748, 0.395515215668593, 0.367436648544477, 0.987982003161633, 0.037738866239552, 0.885168008202475, 0.913286827639239, 0.796183873585212, 0.098712278655574, 0.261871183870716, 0.335356839962797, 0.679727951377338, 0.136553137355370, 0.721227498581740, 0.106761861607241, 0.653757348668560, 0.494173936639270, 0.779051723231275, 0.715037078400694, 0.903720560556316},
                     soln{ 1.031277266092252, 1.317707549353524, -1.720801632872635, 4.860645948247334, -5.855355118111669, 3.332963811242133, 16.896188222071014, -60.487599483717844, 32.155042982949418, 0.005569337201433, -31.048841415533449, 37.691012572532436, -13.159433888372547, 7.155743302933884, -0.352019341980451, -5.981933408628199, 2.767354871117790, 1.388967054208169, -2.320641618026992, 7.282214123190268},
                solnFixed{ 1.000000000000000, 1.298682951988074, -1.664229998544778, 4.725734369862995, -5.632912841731308, 3.166494548114135, 16.823973776378025, -59.678698409774789, 31.655756214221732, 0.882196274266859, -31.448644734996424, 36.994521431065827, -12.016105130060728, 6.059334253233093, 1.117059717858268, -5.670427140779369, 1.762473756167125, 2.105019142105662, -1.474904131960338, 2.000000000000000};

    TriDiagonalSystem<double> sys(a, d, c);
    auto x = sys.solve(rhs);

	auto reportSoln = [](const std::vector<double> &xtest, const std::vector<double> &xtrue) {
        for (double c : xtest) std::cout << '\t' << c;
        std::cout << std::endl;

        double maxError = 0;
        for (size_t i = 0; i < xtrue.size(); ++i)
            maxError = std::max(maxError, std::abs((xtest[i] - xtrue[i]) / xtrue[i]));
        std::cout << "Maximum error: " << maxError << std::endl;
    };

    reportSoln(x, soln);

    sys.fixVariable(0,  1.0);
    sys.fixVariable(19, 2.0);
    auto xFixed = sys.solve(rhs);

    reportSoln(xFixed, solnFixed);

    return 0;
}
